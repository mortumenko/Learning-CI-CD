# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.3"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  end

# ⚠️ Be aware: in lane any action (like slack) will be called, only if previouse action was successful

# CLEAN
  desc "Cleans the project"
  lane :osclean do
      xcclean
  end

# BUILD
  desc "Builds the project"
  lane :osbuild do
      
      identifier = CredentialsManager::AppfileConfig.try_fetch_value(:APP_NAME)
      theName = ENV["APP_NAME"]
      version   = get_version_number(xcodeproj: "KanjiList.xcodeproj")
      build     = get_build_number(xcodeproj: "KanjiList.xcodeproj")
      projectName = get_info_plist_value(path: "KanjiList/Sources/Info.plist", key: "CFBundleName")
      slack(
          message: "App is going to build target",
            payload: {
                  "Version:" => version,
                  "Build:" => build,
                  "Target name: " => theName,
                  "Branch name:" =>  git_branch
            },
          channel: "#test_fastlane"
      )
      xcbuild
      slack(
        message: "App successfully built",
        payload: {
              "Build Date" => Time.new.to_s,
              "Built by" => "mannualy via Fastlane"
        }
      )
  end

# TESTS
    desc "Runs all the tests"
    lane :test do
        ensure_git_status_clean
        scan(device: "iPhone 11")
        slack(
              message: "App successfully runned tests",
              clean: true
        )
    end

# CUSTOMIZED TESTS 
    desc "Runs the tests with custom settings"
	lane :ostest do
# run_tests # ⚠️ [15:49:35]: Could not find action, lane or variable 'run_tests'.
        slack(
            message: "App is going to run 'scan' action",
        )
        
        scan(project: "KanjiList.xcodeproj",
             code_coverage: true,
             device: "iPhone 11"
             #workspace: "Example.xcworkspace"
             #xctestrun:"KanjiList/TestPlan.xctestrun",
             #devices: ["iPhone 11", "iPad Pro"])
        )
        
        slack(
            message: "App successfully runned tests"
        )

    end


# SUBMIT BETA
  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    xcclean
    increment_build_number
    # match(type: "appstore") # more information: https://codesigning.guide
    gym # Build your app - more options available
    pilot
    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

# DEPLOY
  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    ensure_git_status_clean
    ensure_git_branch(branch: "master")
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  
  
  ############################# POST ##############################

  # ✅ This lane is called, only if the executed lane was successful
  after_all do |lane|
      # muted because unexpectedly script increaments build number of test target instead of main target
      #build = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]
      #commit_version_bump(
      #  message: "Build #{build}"
      #)
    # This block is called, only if the executed lane was successful
     slack(
       message: "Successfully executed lane."
     )
  end

  # ❌ This lane is called, only if the executed lane was failed
  error do |lane, exception|
     slack(
       message: exception.message,
       success: false
     )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer



# ✅ optional parameters with default values for slack action:
#slack(
  #message: exception.message,
  #channel: "#test_fastlane", # Optional, by default will post to the default channel configured for the POST URL.
  #payload: { }, # Optional, lets you specify any number of your own Slack attachments.
  #success: false # result will be formated and considered as Successful / Failured. Optional, defaults to true.
#)
