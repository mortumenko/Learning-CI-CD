# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.3"

default_platform :ios

platform :ios do
  before_all do
    #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  end

# ⚠️ Be aware: in lane any action (like slack) will be called, only if previouse action was successful

# CLEAN
  desc "Cleans the project"
  lane :osclean do

    danger(
        danger_id: "theBuild",
        dangerfile: "DangerFile", # current path works
        fail_on_errors: true,
        #base: "develop", # A branch/tag/commit to use as the base of the diff. [master|dev|stable]
        #github_api_token: ENV["DANGER_GITHUB_API_TOKEN"],
        #head: "Danger-2",
        pr: "https://github.com/mortumenko/Learning-CI-CD/pull/2",
        verbose: true
    )

    #if ENV['SCHEME'] != nil
    if ENV['TARGET_NAME'] != nil # OS: custom key-value pair works !!!
      xcclean
    else
      execute_for_all_envs{ osclean }
    end
  end

# BUILD
  desc "Builds the project"
  lane :osbuild do
    # an example for direct terminal command
    #sh "git checkout develop"

    if ENV['TARGET_NAME'] != nil # OS: custom key-value pair works !!!
      xcbuild
      if ENV['SLACK_URL']
        slack( message: "App successfully built. Target: #{ENV['TARGET_NAME']}" )
      end
    else
      execute_for_all_envs{ osbuild }
    end
  end

# TESTS
    desc "Runs all the tests"
    lane :test do

        if ENV['SLACK_URL']
          slack(message: "App is going to run 'scan' action")
        end
        scan(
          project: "KanjiList.xcodeproj",
          scheme: ENV['SCHEME'],
          clean: true,
          device: "iPhone 8"
        )
        if ENV['SLACK_URL']
          slack(message: "App successfully runned tests")
        end
    end

# CUSTOMIZED TESTS
    desc "Runs the tests with custom settings"
	  lane :ostest do
# run_tests # ⚠️ [15:49:35]: Could not find action, lane or variable 'run_tests'.

      if ENV['TARGET_NAME'] != nil # OS: custom key-value pair works !!!
          #ensure_git_status_clean

          targetName = ENV['TARGET_NAME']
          if ENV['SLACK_URL']
            version   = get_version_number(xcodeproj: "KanjiList.xcodeproj")
            build     = get_build_number(xcodeproj: "KanjiList.xcodeproj")
            unusedProjectName = get_info_plist_value(path: "KanjiList/Application/Info.plist", key: "CFBundleName")
            unusedIdentifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
            slack(
                message: "App is going to build target: #{ENV['TARGET_NAME']}",
                payload: {
                  "Version:" => version,
                  "Build:" => build,
                  "Target name: " => targetName,
                  "Branch name:" =>  git_branch
                },
                channel: "#test_fastlane"
            )
          end

        scan(project: "KanjiList.xcodeproj",
             code_coverage: true,
             clean: true,
             scheme: ENV['SCHEME'],
             device: "iPhone 8" #devices: ["iPhone 11", "iPad Pro"])
             #xctestrun:"KanjiList/TestPlan.xctestrun",
        )
        if ENV['SLACK_URL']
          slack(
              message: "App successfully was built target : #{ENV['TARGET_NAME']} and ran tests",
              payload: {
                    "Build Date" => Time.new.to_s,
                    "Built by" => "mannualy via Fastlane",
                    "Target name: " => targetName,
                    "Branch name:" =>  git_branch
              }
          )
        end
      else
          execute_for_all_envs{ ostest }
      end

    end


# SUBMIT BETA
  #desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    xcclean
    increment_build_number( xcodeproj: "KanjiList.xcodeproj" )
    # match(type: "appstore") # more information: https://codesigning.guide
    # ⚠️ Gymfile: Since you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called Gymfile.
    gym(scheme: ENV['SCHEME'], configuration: "Debug", output_directory: "ipa-storage", silent: true)# Build your app - more options available #skip_codesigning: true,
    #pilot
    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

# DEPLOY
  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    ensure_git_status_clean
    ensure_git_branch(branch: "master")
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end


# But what if you want to run all the commands for all the targets at once?
# https://www.raywenderlich.com/233168-fastlane-tutorial-getting-started
  def execute_for_all_envs
    # 1
    schemeList = Dir.glob(".env.*")
    # 2
    schemeList.each do |file|
      # 3
      Dotenv.overload(file)
      # 4
      yield
    end
  end

=begin
This is a multi-line comment.
  You can use this approach to make your comments
  span multiple lines without placing hash marks at the start of each
line.
=end

=begin
swiftlint(
    mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect
    #path: "/path/to/lint",       # Specify path to lint (optional)
    output_file: "swiftlint.result.json", # The path of the output file (optional)
    config_file: ".swiftlint.yml",     # The path of the configuration file (optional)
    #files: [# List of files to process (optional)
    #  "AppDelegate.swift",
    #  "path/to/project/Model.swift"
    #],
    strict: true,
    ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
)
=end


  desc "SetupJenkins for project"
  lane :setupJenkins do
    setup_jenkins
  end


  ############################# POST ##############################

  # ✅ This lane is called, only if the executed lane was successful
  after_all do |lane|
      # muted because unexpectedly script increaments build number of test target instead of main target
      #build = Actions.lane_context[Actions::SharedValues::BUILD_NUMBER]
      #commit_version_bump(
      #  message: "Build #{build}"
      #)
    # This block is called, only if the executed lane was successful
    branch = "Branch is: #{git_branch}"
    notification(subtitle: "✅ Finished KanjiList's lane", message: "without issues. #{branch}")
    if ENV['SLACK_URL']
      slack(message: "Successfully executed lane.")
    end
  end

  # ❌ This lane is called, only if the executed lane was failed
  error do |lane, exception|
    notification(subtitle: "❌ Finished KanjiList lane with exception:", message: exception.message)
    if ENV['SLACK_URL']
      slack( message: exception.message, success: false )
    end
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer



# ✅ optional parameters with default values for slack action:
#slack(
  #message: exception.message,
  #channel: "#test_fastlane", # Optional, by default will post to the default channel configured for the POST URL.
  #payload: { }, # Optional, lets you specify any number of your own Slack attachments.
  #success: false # result will be formated and considered as Successful / Failured. Optional, defaults to true.
#)
